// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SimplePubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_DDS_EXAMPLES_SIMPLE_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_DDS_EXAMPLES_SIMPLE_PUBSUBTYPES_H_

#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastrtps/utils/md5.h>

#include "Simple.h"


#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error \
    Generated Simple is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

namespace dds_examples
{

    #ifndef SWIG
    namespace detail {

        template<typename Tag, typename Tag::type M>
        struct SimpleT_rob
        {
            friend constexpr typename Tag::type get(
                    Tag)
            {
                return M;
            }
        };

        struct SimpleT_f
        {
            typedef double SimpleT::* type;
            friend constexpr type get(
                    SimpleT_f);
        };

        template struct SimpleT_rob<SimpleT_f, &SimpleT::m_f>;

        template <typename T, typename Tag>
        inline size_t constexpr SimpleT_offset_of() {
            return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
        }
    }
    #endif

    /*!
     * @brief This class represents the TopicDataType of the type SimpleT defined by the user in the IDL file.
     * @ingroup Simple
     */
    class SimpleTPubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef SimpleT type;

        eProsima_user_DllExport SimpleTPubSubType();

        eProsima_user_DllExport virtual ~SimpleTPubSubType() override;

        eProsima_user_DllExport virtual bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

        eProsima_user_DllExport virtual bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override;

        eProsima_user_DllExport virtual bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport virtual void* createData() override;

        eProsima_user_DllExport virtual void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_impl();
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) SimpleT();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_impl()
        {
            return 24ULL == (detail::SimpleT_offset_of<SimpleT, detail::SimpleT_f>() + sizeof(double));

        }};
    typedef std::array<dds_examples::SimpleT, 3> SimpleArray3T;

    #ifndef SWIG
    namespace detail {

        template<typename Tag, typename Tag::type M>
        struct ComplexT_rob
        {
            friend constexpr typename Tag::type get(
                    Tag)
            {
                return M;
            }
        };

        struct ComplexT_f
        {
            typedef dds_examples::SimpleArray3T ComplexT::* type;
            friend constexpr type get(
                    ComplexT_f);
        };

        template struct ComplexT_rob<ComplexT_f, &ComplexT::m_a>;

        template <typename T, typename Tag>
        inline size_t constexpr ComplexT_offset_of() {
            return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
        }
    }
    #endif

    /*!
     * @brief This class represents the TopicDataType of the type ComplexT defined by the user in the IDL file.
     * @ingroup Simple
     */
    class ComplexTPubSubType : public eprosima::fastdds::dds::TopicDataType
    {
    public:

        typedef ComplexT type;

        eProsima_user_DllExport ComplexTPubSubType();

        eProsima_user_DllExport virtual ~ComplexTPubSubType() override;

        eProsima_user_DllExport virtual bool serialize(
                void* data,
                eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

        eProsima_user_DllExport virtual bool deserialize(
                eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                void* data) override;

        eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                void* data) override;

        eProsima_user_DllExport virtual bool getKey(
                void* data,
                eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                bool force_md5 = false) override;

        eProsima_user_DllExport virtual void* createData() override;

        eProsima_user_DllExport virtual void deleteData(
                void* data) override;

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
        eProsima_user_DllExport inline bool is_bounded() const override
        {
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

    #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
        eProsima_user_DllExport inline bool is_plain() const override
        {
            return is_plain_impl();
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

    #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
        eProsima_user_DllExport inline bool construct_sample(
                void* memory) const override
        {
            new (memory) ComplexT();
            return true;
        }

    #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

        MD5 m_md5;
        unsigned char* m_keyBuffer;

    private:

        static constexpr bool is_plain_impl()
        {
            return 96ULL == (detail::ComplexT_offset_of<ComplexT, detail::ComplexT_f>() + sizeof(dds_examples::SimpleArray3T));

        }};
}

#endif // _FAST_DDS_GENERATED_DDS_EXAMPLES_SIMPLE_PUBSUBTYPES_H_

