// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorld.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_DDS_EXAMPLES_HELLOWORLD_H_
#define _FAST_DDS_GENERATED_DDS_EXAMPLES_HELLOWORLD_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(HELLOWORLD_SOURCE)
#define HELLOWORLD_DllAPI __declspec( dllexport )
#else
#define HELLOWORLD_DllAPI __declspec( dllimport )
#endif // HELLOWORLD_SOURCE
#else
#define HELLOWORLD_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define HELLOWORLD_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace dds_examples {
    /*!
     * @brief This class represents the enumeration ColorT defined by the user in the IDL file.
     * @ingroup HelloWorld
     */
    enum ColorT : uint32_t
    {
        RED,
        GREEN,
        BLUE
    };
    typedef std::vector<dds_examples::ColorT> ColorSequenceT;
    typedef std::array<int64_t, 3> ThreeValuesT;
    /*!
     * @brief This class represents the structure PayloadT defined by the user in the IDL file.
     * @ingroup HelloWorld
     */
    class PayloadT
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PayloadT();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PayloadT();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object dds_examples::PayloadT that will be copied.
         */
        eProsima_user_DllExport PayloadT(
                const PayloadT& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object dds_examples::PayloadT that will be copied.
         */
        eProsima_user_DllExport PayloadT(
                PayloadT&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object dds_examples::PayloadT that will be copied.
         */
        eProsima_user_DllExport PayloadT& operator =(
                const PayloadT& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object dds_examples::PayloadT that will be copied.
         */
        eProsima_user_DllExport PayloadT& operator =(
                PayloadT&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::PayloadT object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const PayloadT& x) const;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::PayloadT object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const PayloadT& x) const;

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(
                uint64_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint64_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint64_t& id();

        /*!
         * @brief This function sets a value in member color
         * @param _color New value for member color
         */
        eProsima_user_DllExport void color(
                dds_examples::ColorT _color);

        /*!
         * @brief This function returns the value of member color
         * @return Value of member color
         */
        eProsima_user_DllExport dds_examples::ColorT color() const;

        /*!
         * @brief This function returns a reference to member color
         * @return Reference to member color
         */
        eProsima_user_DllExport dds_examples::ColorT& color();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const dds_examples::PayloadT& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_id;
        dds_examples::ColorT m_color;

    };
    typedef std::vector<dds_examples::PayloadT> PayloadSequenceT;
    /*!
     * @brief This class represents the structure HelloWorldT defined by the user in the IDL file.
     * @ingroup HelloWorld
     */
    class HelloWorldT
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport HelloWorldT();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~HelloWorldT();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object dds_examples::HelloWorldT that will be copied.
         */
        eProsima_user_DllExport HelloWorldT(
                const HelloWorldT& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object dds_examples::HelloWorldT that will be copied.
         */
        eProsima_user_DllExport HelloWorldT(
                HelloWorldT&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object dds_examples::HelloWorldT that will be copied.
         */
        eProsima_user_DllExport HelloWorldT& operator =(
                const HelloWorldT& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object dds_examples::HelloWorldT that will be copied.
         */
        eProsima_user_DllExport HelloWorldT& operator =(
                HelloWorldT&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::HelloWorldT object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const HelloWorldT& x) const;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::HelloWorldT object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const HelloWorldT& x) const;

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(
                uint64_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint64_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint64_t& id();

        /*!
         * @brief This function copies the value in member header
         * @param _header New value to be copied in member header
         */
        eProsima_user_DllExport void header(
                const dds_examples::PayloadT& _header);

        /*!
         * @brief This function moves the value in member header
         * @param _header New value to be moved in member header
         */
        eProsima_user_DllExport void header(
                dds_examples::PayloadT&& _header);

        /*!
         * @brief This function returns a constant reference to member header
         * @return Constant reference to member header
         */
        eProsima_user_DllExport const dds_examples::PayloadT& header() const;

        /*!
         * @brief This function returns a reference to member header
         * @return Reference to member header
         */
        eProsima_user_DllExport dds_examples::PayloadT& header();
        /*!
         * @brief This function sets a value in member index
         * @param _index New value for member index
         */
        eProsima_user_DllExport void index(
                uint64_t _index);

        /*!
         * @brief This function returns the value of member index
         * @return Value of member index
         */
        eProsima_user_DllExport uint64_t index() const;

        /*!
         * @brief This function returns a reference to member index
         * @return Reference to member index
         */
        eProsima_user_DllExport uint64_t& index();

        /*!
         * @brief This function copies the value in member message
         * @param _message New value to be copied in member message
         */
        eProsima_user_DllExport void message(
                const std::string& _message);

        /*!
         * @brief This function moves the value in member message
         * @param _message New value to be moved in member message
         */
        eProsima_user_DllExport void message(
                std::string&& _message);

        /*!
         * @brief This function returns a constant reference to member message
         * @return Constant reference to member message
         */
        eProsima_user_DllExport const std::string& message() const;

        /*!
         * @brief This function returns a reference to member message
         * @return Reference to member message
         */
        eProsima_user_DllExport std::string& message();
        /*!
         * @brief This function sets a value in member color
         * @param _color New value for member color
         */
        eProsima_user_DllExport void color(
                dds_examples::ColorT _color);

        /*!
         * @brief This function returns the value of member color
         * @return Value of member color
         */
        eProsima_user_DllExport dds_examples::ColorT color() const;

        /*!
         * @brief This function returns a reference to member color
         * @return Reference to member color
         */
        eProsima_user_DllExport dds_examples::ColorT& color();

        /*!
         * @brief This function copies the value in member colors
         * @param _colors New value to be copied in member colors
         */
        eProsima_user_DllExport void colors(
                const dds_examples::ColorSequenceT& _colors);

        /*!
         * @brief This function moves the value in member colors
         * @param _colors New value to be moved in member colors
         */
        eProsima_user_DllExport void colors(
                dds_examples::ColorSequenceT&& _colors);

        /*!
         * @brief This function returns a constant reference to member colors
         * @return Constant reference to member colors
         */
        eProsima_user_DllExport const dds_examples::ColorSequenceT& colors() const;

        /*!
         * @brief This function returns a reference to member colors
         * @return Reference to member colors
         */
        eProsima_user_DllExport dds_examples::ColorSequenceT& colors();
        /*!
         * @brief This function copies the value in member values
         * @param _values New value to be copied in member values
         */
        eProsima_user_DllExport void values(
                const dds_examples::ThreeValuesT& _values);

        /*!
         * @brief This function moves the value in member values
         * @param _values New value to be moved in member values
         */
        eProsima_user_DllExport void values(
                dds_examples::ThreeValuesT&& _values);

        /*!
         * @brief This function returns a constant reference to member values
         * @return Constant reference to member values
         */
        eProsima_user_DllExport const dds_examples::ThreeValuesT& values() const;

        /*!
         * @brief This function returns a reference to member values
         * @return Reference to member values
         */
        eProsima_user_DllExport dds_examples::ThreeValuesT& values();
        /*!
         * @brief This function copies the value in member arrayOfStructs
         * @param _arrayOfStructs New value to be copied in member arrayOfStructs
         */
        eProsima_user_DllExport void arrayOfStructs(
                const dds_examples::PayloadSequenceT& _arrayOfStructs);

        /*!
         * @brief This function moves the value in member arrayOfStructs
         * @param _arrayOfStructs New value to be moved in member arrayOfStructs
         */
        eProsima_user_DllExport void arrayOfStructs(
                dds_examples::PayloadSequenceT&& _arrayOfStructs);

        /*!
         * @brief This function returns a constant reference to member arrayOfStructs
         * @return Constant reference to member arrayOfStructs
         */
        eProsima_user_DllExport const dds_examples::PayloadSequenceT& arrayOfStructs() const;

        /*!
         * @brief This function returns a reference to member arrayOfStructs
         * @return Reference to member arrayOfStructs
         */
        eProsima_user_DllExport dds_examples::PayloadSequenceT& arrayOfStructs();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const dds_examples::HelloWorldT& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_id;
        dds_examples::PayloadT m_header;
        uint64_t m_index;
        std::string m_message;
        dds_examples::ColorT m_color;
        dds_examples::ColorSequenceT m_colors;
        dds_examples::ThreeValuesT m_values;
        dds_examples::PayloadSequenceT m_arrayOfStructs;

    };
} // namespace dds_examples

#endif // _FAST_DDS_GENERATED_DDS_EXAMPLES_HELLOWORLD_H_

