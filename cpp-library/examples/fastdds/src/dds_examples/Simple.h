// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Simple.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_DDS_EXAMPLES_SIMPLE_H_
#define _FAST_DDS_GENERATED_DDS_EXAMPLES_SIMPLE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SIMPLE_SOURCE)
#define SIMPLE_DllAPI __declspec( dllexport )
#else
#define SIMPLE_DllAPI __declspec( dllimport )
#endif // SIMPLE_SOURCE
#else
#define SIMPLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SIMPLE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace dds_examples {
    /*!
     * @brief This class represents the structure SimpleT defined by the user in the IDL file.
     * @ingroup Simple
     */
    class SimpleT
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport SimpleT();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~SimpleT();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object dds_examples::SimpleT that will be copied.
         */
        eProsima_user_DllExport SimpleT(
                const SimpleT& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object dds_examples::SimpleT that will be copied.
         */
        eProsima_user_DllExport SimpleT(
                SimpleT&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object dds_examples::SimpleT that will be copied.
         */
        eProsima_user_DllExport SimpleT& operator =(
                const SimpleT& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object dds_examples::SimpleT that will be copied.
         */
        eProsima_user_DllExport SimpleT& operator =(
                SimpleT&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::SimpleT object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const SimpleT& x) const;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::SimpleT object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const SimpleT& x) const;

        /*!
         * @brief This function sets a value in member j
         * @param _j New value for member j
         */
        eProsima_user_DllExport void j(
                int64_t _j);

        /*!
         * @brief This function returns the value of member j
         * @return Value of member j
         */
        eProsima_user_DllExport int64_t j() const;

        /*!
         * @brief This function returns a reference to member j
         * @return Reference to member j
         */
        eProsima_user_DllExport int64_t& j();

        /*!
         * @brief This function sets a value in member i
         * @param _i New value for member i
         */
        eProsima_user_DllExport void i(
                int64_t _i);

        /*!
         * @brief This function returns the value of member i
         * @return Value of member i
         */
        eProsima_user_DllExport int64_t i() const;

        /*!
         * @brief This function returns a reference to member i
         * @return Reference to member i
         */
        eProsima_user_DllExport int64_t& i();

        /*!
         * @brief This function sets a value in member f
         * @param _f New value for member f
         */
        eProsima_user_DllExport void f(
                double _f);

        /*!
         * @brief This function returns the value of member f
         * @return Value of member f
         */
        eProsima_user_DllExport double f() const;

        /*!
         * @brief This function returns a reference to member f
         * @return Reference to member f
         */
        eProsima_user_DllExport double& f();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const dds_examples::SimpleT& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int64_t m_j;
        int64_t m_i;
        double m_f;

    };
    typedef std::array<dds_examples::SimpleT, 3> SimpleArray3T;
    /*!
     * @brief This class represents the structure ComplexT defined by the user in the IDL file.
     * @ingroup Simple
     */
    class ComplexT
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ComplexT();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ComplexT();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object dds_examples::ComplexT that will be copied.
         */
        eProsima_user_DllExport ComplexT(
                const ComplexT& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object dds_examples::ComplexT that will be copied.
         */
        eProsima_user_DllExport ComplexT(
                ComplexT&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object dds_examples::ComplexT that will be copied.
         */
        eProsima_user_DllExport ComplexT& operator =(
                const ComplexT& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object dds_examples::ComplexT that will be copied.
         */
        eProsima_user_DllExport ComplexT& operator =(
                ComplexT&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::ComplexT object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ComplexT& x) const;

        /*!
         * @brief Comparison operator.
         * @param x dds_examples::ComplexT object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ComplexT& x) const;

        /*!
         * @brief This function copies the value in member s
         * @param _s New value to be copied in member s
         */
        eProsima_user_DllExport void s(
                const dds_examples::SimpleT& _s);

        /*!
         * @brief This function moves the value in member s
         * @param _s New value to be moved in member s
         */
        eProsima_user_DllExport void s(
                dds_examples::SimpleT&& _s);

        /*!
         * @brief This function returns a constant reference to member s
         * @return Constant reference to member s
         */
        eProsima_user_DllExport const dds_examples::SimpleT& s() const;

        /*!
         * @brief This function returns a reference to member s
         * @return Reference to member s
         */
        eProsima_user_DllExport dds_examples::SimpleT& s();
        /*!
         * @brief This function copies the value in member a
         * @param _a New value to be copied in member a
         */
        eProsima_user_DllExport void a(
                const dds_examples::SimpleArray3T& _a);

        /*!
         * @brief This function moves the value in member a
         * @param _a New value to be moved in member a
         */
        eProsima_user_DllExport void a(
                dds_examples::SimpleArray3T&& _a);

        /*!
         * @brief This function returns a constant reference to member a
         * @return Constant reference to member a
         */
        eProsima_user_DllExport const dds_examples::SimpleArray3T& a() const;

        /*!
         * @brief This function returns a reference to member a
         * @return Reference to member a
         */
        eProsima_user_DllExport dds_examples::SimpleArray3T& a();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const dds_examples::ComplexT& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        dds_examples::SimpleT m_s;
        dds_examples::SimpleArray3T m_a;

    };
} // namespace dds_examples

#endif // _FAST_DDS_GENERATED_DDS_EXAMPLES_SIMPLE_H_

